
import com.sun.org.apache.bcel.internal.generic.Select;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Lab-3_9
 */
public class product extends javax.swing.JFrame {

    ArrayList<products> al = new ArrayList<>();
    MyModel tm;
    File f;

    /**
     * Creates new form product
     */
    public product() {
        initComponents();
        tm = new MyModel();
        jtable1.setModel(tm);

        jComboBox1.removeAllItems();
        jComboBox1.addItem("Select");

        jComboBox2.removeAllItems();
        jComboBox2.addItem("Select");

        try {
            ResultSet rs = DBLoader.executeQuery("select * from category");
            while (rs.next()) {
                String catname = rs.getString("cname");
                jComboBox1.addItem(catname);
                jComboBox2.addItem(catname);
            }
        } catch (Exception ex) {
            ex.printStackTrace();

        }
        setSize(1000, 700);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        btbrowse = new javax.swing.JButton();
        lbcategory = new javax.swing.JLabel();
        lbproductname = new javax.swing.JLabel();
        lbdesc = new javax.swing.JLabel();
        lbbarcode = new javax.swing.JLabel();
        lbprice = new javax.swing.JLabel();
        lbphoto1 = new javax.swing.JLabel();
        tfproduct = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tadesc = new javax.swing.JTextArea();
        tfbarcode = new javax.swing.JTextField();
        tfprice = new javax.swing.JTextField();
        lbphoto = new javax.swing.JLabel();
        btadd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        btshow = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btedit = new javax.swing.JButton();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        btbrowse.setFont(new java.awt.Font("Yu Gothic UI", 3, 24)); // NOI18N
        btbrowse.setForeground(new java.awt.Color(204, 0, 204));
        btbrowse.setText("Browse");
        btbrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btbrowseActionPerformed(evt);
            }
        });
        getContentPane().add(btbrowse);
        btbrowse.setBounds(370, 450, 120, 40);

        lbcategory.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        lbcategory.setForeground(new java.awt.Color(204, 51, 0));
        lbcategory.setText("Category");
        getContentPane().add(lbcategory);
        lbcategory.setBounds(40, 30, 150, 40);

        lbproductname.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        lbproductname.setForeground(new java.awt.Color(204, 51, 0));
        lbproductname.setText("Product Name");
        getContentPane().add(lbproductname);
        lbproductname.setBounds(40, 100, 150, 40);

        lbdesc.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        lbdesc.setForeground(new java.awt.Color(204, 51, 0));
        lbdesc.setText("Description");
        getContentPane().add(lbdesc);
        lbdesc.setBounds(40, 190, 150, 40);

        lbbarcode.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        lbbarcode.setForeground(new java.awt.Color(204, 51, 0));
        lbbarcode.setText("Barcode");
        getContentPane().add(lbbarcode);
        lbbarcode.setBounds(40, 290, 150, 40);

        lbprice.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        lbprice.setForeground(new java.awt.Color(204, 51, 0));
        lbprice.setText("Price");
        getContentPane().add(lbprice);
        lbprice.setBounds(40, 360, 150, 40);

        lbphoto1.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        lbphoto1.setForeground(new java.awt.Color(204, 51, 0));
        lbphoto1.setText("Photo");
        getContentPane().add(lbphoto1);
        lbphoto1.setBounds(40, 450, 150, 40);
        getContentPane().add(tfproduct);
        tfproduct.setBounds(210, 100, 170, 40);

        tadesc.setColumns(20);
        tadesc.setRows(5);
        jScrollPane1.setViewportView(tadesc);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(210, 160, 170, 100);
        getContentPane().add(tfbarcode);
        tfbarcode.setBounds(210, 290, 170, 40);
        getContentPane().add(tfprice);
        tfprice.setBounds(210, 360, 170, 40);
        getContentPane().add(lbphoto);
        lbphoto.setBounds(210, 420, 130, 100);

        btadd.setBackground(new java.awt.Color(0, 153, 153));
        btadd.setFont(new java.awt.Font("Yu Gothic Medium", 3, 36)); // NOI18N
        btadd.setForeground(new java.awt.Color(153, 0, 153));
        btadd.setText("ADD");
        btadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btaddActionPerformed(evt);
            }
        });
        getContentPane().add(btadd);
        btadd.setBounds(200, 550, 150, 50);

        jtable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtable1);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(510, 70, 460, 380);

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(210, 40, 170, 30);

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox2);
        jComboBox2.setBounds(510, 30, 230, 30);

        btshow.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        btshow.setForeground(new java.awt.Color(51, 0, 153));
        btshow.setText("Show");
        btshow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btshowActionPerformed(evt);
            }
        });
        getContentPane().add(btshow);
        btshow.setBounds(790, 30, 90, 30);

        jButton1.setBackground(new java.awt.Color(0, 255, 0));
        jButton1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(153, 0, 153));
        jButton1.setText("DELETE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(570, 470, 160, 40);

        btedit.setBackground(new java.awt.Color(0, 204, 0));
        btedit.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        btedit.setForeground(new java.awt.Color(153, 0, 204));
        btedit.setText("EDIT");
        btedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bteditActionPerformed(evt);
            }
        });
        getContentPane().add(btedit);
        btedit.setBounds(780, 470, 130, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btaddActionPerformed
        // TODO add your handling code here:
        String cat = jComboBox1.getSelectedItem().toString();
        String name = tfproduct.getText();
        String desc = tadesc.getText();
        String barcode = tfbarcode.getText();
        String price = tfprice.getText();
        String photo = lbphoto1.getText();
        if (name == null || desc.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required !!!");
        } else {
            String fname = f.getPath();

            String filename = new Date().getTime() + ".jpg";
            new savefileinfolder(f, filename);
            try {
                ResultSet rs = DBLoader.executeQuery("select * from product where barcode='" + barcode + "'");
                if (rs.next()) {

                    JOptionPane.showMessageDialog(rootPane, "Product with barcode already exists");

                } else {

                    rs.moveToInsertRow();
                    rs.updateString("pname", name);
                    rs.updateString("pdesc", desc);
                    rs.updateString("barcode", barcode);
                    rs.updateString("price", price);
                    rs.updateString("photo", "src/uploaded_pics/" + filename);
                    rs.updateString("category", cat);
                    rs.insertRow();
                    JOptionPane.showMessageDialog(this, "Category added");
//                    getProducts(cat);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }

        }
    }//GEN-LAST:event_btaddActionPerformed

    private void btbrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btbrowseActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser();
        int ans = jfc.showOpenDialog(this);
        if (ans == JFileChooser.APPROVE_OPTION) {
            f = jfc.getSelectedFile();
            try {
                BufferedImage bimg = ImageIO.read(f);
                BufferedImage img = resize(bimg, lbphoto.getWidth(), lbphoto.getHeight());
                lbphoto.setIcon(new ImageIcon(img));

            } catch (IOException ex) {
                Logger.getLogger(product.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_btbrowseActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
      
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void btshowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btshowActionPerformed

        String select = jComboBox2.getSelectedItem().toString();
        if (select.equals("Select")) {

            JOptionPane.showMessageDialog(rootPane, "Select a category first");

        } else {

            String categ = jComboBox2.getSelectedItem().toString();
            getProducts(categ);

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btshowActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        int select = jtable1.getSelectedRow();
        if(select<0){
            
            JOptionPane.showMessageDialog(rootPane, "Select a row first");
            
        }
        else{
                        
            String pid = al.get(select).pid+"";
            try {
                
                ResultSet rs = DBLoader.executeQuery("select * from product where pid='"+pid+"'");
                if(rs.next()){
                    
                    rs.deleteRow();
                    JOptionPane.showMessageDialog(rootPane, "Product Deleted!!");
                    getProducts(jComboBox2.getSelectedItem().toString());
                }
                
            } catch (Exception e) {
            }
            
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void bteditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bteditActionPerformed
        // TODO add your handling code here:
        
       int selected = jtable1.getSelectedRow();
       int pid = al.get(selected).pid;
        edit obj  = new edit(pid+"");
               
    }//GEN-LAST:event_bteditActionPerformed

    class MyModel extends AbstractTableModel {

        @Override
        public int getRowCount() {
            //To change body of generated methods, choose Tools | Templates.
            return al.size();
        }

        @Override
        public int getColumnCount() {
//To change body of generated methods, choose Tools | Templates.
            return 5;
        }

        @Override
        public Object getValueAt(int i, int j) {
//To change body of generated methods, choose Tools | Templates.
            products cat = al.get(i);
            if (j == 0) {
                return cat.pid;
            } else if (j == 1) {
                return cat.pname;
            } else if (j == 2) {
                return cat.pdesc;
            } else if (j == 3) {
                return cat.price;
            } else {
                return cat.photo;
            }

        }

        @Override
        public String getColumnName(int j) {
            String col[] = {"pid", "pname", "pdesc", "barcode", "price", "photo"};

            //To change body of generated methods, choose Tools | Templates.
            return col[j];
        }

    }

    class ImageRenderer extends DefaultTableCellRenderer {

        JLabel lbl = new JLabel();

        ImageIcon icon;
        BufferedImage bufferedImage;

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            try {

                icon = new ImageIcon(al.get(row).photo);
                Image im = icon.getImage();
                Image newimage = im.getScaledInstance(80, 70, Image.SCALE_SMOOTH);
                icon = new ImageIcon(newimage);
                lbl.setIcon(icon);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
            return lbl;
        }

    }

    public BufferedImage resize(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }

    public void getProducts(String cat) {
        al.clear();
        tm.fireTableDataChanged();
        ResultSet rs = DBLoader.executeQuery("select * from product where category='" + cat + "'");
        try {
            while (rs.next()) {
                int pid = rs.getInt("pid");
                String pname = rs.getString("pname");
                String pdesc = rs.getString("pdesc");
                String barcode = rs.getString("barcode");
                String price = rs.getString("price");
                String photo = rs.getString("photo");
                System.out.println("Adding in arraylist");
                al.add(new products(pname, pdesc, barcode, price, photo, pid));
                jtable1.getColumnModel().getColumn(2).setCellRenderer(new product.ImageRenderer());
                jtable1.setRowHeight(100);
                tm.fireTableDataChanged();

            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new product().setVisible(true);
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btadd;
    private javax.swing.JButton btbrowse;
    private javax.swing.JButton btedit;
    private javax.swing.JButton btshow;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jtable1;
    private javax.swing.JLabel lbbarcode;
    private javax.swing.JLabel lbcategory;
    private javax.swing.JLabel lbdesc;
    private javax.swing.JLabel lbphoto;
    private javax.swing.JLabel lbphoto1;
    private javax.swing.JLabel lbprice;
    private javax.swing.JLabel lbproductname;
    private javax.swing.JTextArea tadesc;
    private javax.swing.JTextField tfbarcode;
    private javax.swing.JTextField tfprice;
    private javax.swing.JTextField tfproduct;
    // End of variables declaration//GEN-END:variables
}
